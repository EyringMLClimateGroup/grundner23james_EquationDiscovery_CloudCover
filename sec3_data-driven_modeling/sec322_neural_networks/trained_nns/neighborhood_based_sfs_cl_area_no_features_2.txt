How to use the model:
model = tensorflow.keras.models.load_model(filename+'.h5')
model.predict(scaled input data)

Input/Output
------------
Input and output variables:
['cli' 'rh' 'cl_area']
The (order of) input variables:
['cli' 'rh']

Scaling
-------
Standard Scaler mean values:
[3.38180032e-06 6.02512234e-01]
Standard Scaler standard deviation:
[1.01308124e-05 3.32494615e-01]
=> Apply this standard scaling to (only) the input data before processing.

Preprocessed data
-----------------
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/neighborhood_based_SR_DYAMOND/cloud_cover_input_train_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/neighborhood_based_SR_DYAMOND/cloud_cover_input_valid_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/neighborhood_based_SR_DYAMOND/cloud_cover_output_train_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/neighborhood_based_SR_DYAMOND/cloud_cover_output_valid_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/neighborhood_based_SR_DYAMOND/cloud_cover_input_test_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/neighborhood_based_SR_DYAMOND/cloud_cover_output_test_11.npy

Model
-----
Results from the 2-th fold
Training epochs: 21
Weights restored from epoch: 3

Unbounded training loss: 243.8899
Unbounded validation loss: 243.5091
Bounded training loss: 239.0167
Bounded validation loss: 238.6358
