How to use the model:
model = tensorflow.keras.models.load_model(filename+'.h5')
model.predict(scaled input data)

Input/Output
------------
Input and output variables:
['hus' 'clw' 'cli' 'ta' 'pa' 'ua' 'va' 'zg' 'coriolis' 'fr_land' 'cl_area']
The (order of) input variables:
['hus' 'clw' 'cli' 'ta' 'pa' 'ua' 'va' 'zg' 'coriolis' 'fr_land']

Scaling
-------
Standard Scaler mean values:
[ 4.12205844e-03  2.25493498e-05  3.38180032e-06  2.57065512e+02
  6.00030443e+04  5.64610581e+00 -1.37740994e-01  5.64080139e+03
 -3.57089429e-06  2.35046400e-01]
Standard Scaler standard deviation:
[5.07648249e-03 5.69702638e-05 1.01308124e-05 3.00533874e+01
 3.12514292e+04 1.38936273e+01 8.68580342e+00 5.66963918e+03
 8.83059572e-05 4.11184302e-01]
=> Apply this standard scaling to (only) the input data before processing.

Preprocessed data
-----------------
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/grid_cell_based_DYAMOND/cloud_cover_input_train_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/grid_cell_based_DYAMOND/cloud_cover_input_valid_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/grid_cell_based_DYAMOND/cloud_cover_output_train_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/grid_cell_based_DYAMOND/cloud_cover_output_valid_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/grid_cell_based_DYAMOND/cloud_cover_input_test_11.npy
/home/b/b309170/my_work/icon-ml_data/cloud_cover_parameterization/grid_cell_based_DYAMOND/cloud_cover_output_test_11.npy

Model
-----
Results from the 2-th fold
Training epochs: 25
Weights restored from epoch: 25
Unbounded training loss: 79.7740
Unbounded validation loss: 79.4697
Bounded training loss: 73.5674
Bounded validation loss: 73.2604
